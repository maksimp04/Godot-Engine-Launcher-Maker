[gd_scene load_steps=5 format=2]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0.8, 0.8, 0.8, 1 )

[sub_resource type="StyleBoxFlat" id=2]

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=4]
script/source = "extends Button

enum Horizontal_Position { left,middle,right }
enum Vertical_Position { top,middle,bottom }

export(Horizontal_Position) var popup_align setget set_p_align
export(Vertical_Position) var popup_valign  setget set_p_valign

signal _ready
var _ready := false

func _pressed():
	if $Label.text != \"0\":
		$PanelContainer.visible = pressed

func _ready():
	ErrorManager.tracer = self
	_ready = true
	emit_signal(\"_ready\")
	set_p_align(popup_align)
	set_p_valign(popup_valign)

func add_message(s:String,is_error:=false):
	var cl := $PanelContainer/ScrollContainer/VBoxContainer/Label.duplicate()
	cl.visible = true
	cl.text = s
	var clr :float = 0.2 if is_error == true else 1
	cl.get_node(\"ColorRect\").color = Color(1,clr,0.2)
	modulate = Color(1,1,1,1)
	if self_modulate != Color(1,0.2,0.2):
		self_modulate = Color(1,clr,0.2)
	$Label.text = str(int($Label.text)+1) 
	$PanelContainer/ScrollContainer/VBoxContainer.add_child(cl)

func set_p_align(v:int):
	if _ready == false:
		yield(self,\"_ready\")
	popup_align = v
	var panel := $PanelContainer
	var enumh := Horizontal_Position
	var panelsize :float = panel.rect_size.x
	var size :float = rect_size.x
	match v:
		enumh.left:
			panel.rect_position.x = -5 -panelsize
		enumh.middle:
			panel.rect_position.x = -panelsize/2 + size/2
		enumh.right:
			panel.rect_position.x = size + 5

func set_p_valign(v:int):
	if _ready == false:
		yield(self,\"_ready\")
	popup_valign = v
	var panel := $PanelContainer
	var enumv := Vertical_Position
	var panelsize :float = panel.rect_size.y
	var size :float = rect_size.y
	match v:
		enumv.top:
			panel.rect_position.y = -5 -panelsize
		enumv.middle:
			panel.rect_position.y = -panelsize/2 + size/2
		enumv.bottom:
			panel.rect_position.y = size + 5
			
"

[node name="Button" type="Button"]
modulate = Color( 1, 1, 1, 0.6 )
self_modulate = Color( 0.6, 0.6, 0.6, 1 )
margin_right = 12.0
margin_bottom = 22.0
rect_min_size = Vector2( 24, 24 )
custom_styles/hover = SubResource( 1 )
custom_styles/pressed = SubResource( 2 )
custom_styles/focus = SubResource( 3 )
custom_styles/disabled = SubResource( 3 )
custom_styles/normal = SubResource( 3 )
toggle_mode = true
script = SubResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "0"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PanelContainer" type="PanelContainer" parent="."]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -150.0
margin_top = -75.0
margin_right = 150.0
margin_bottom = 75.0
rect_min_size = Vector2( 300, 150 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ScrollContainer" type="ScrollContainer" parent="PanelContainer"]
margin_left = 7.0
margin_top = 7.0
margin_right = 293.0
margin_bottom = 143.0

[node name="VBoxContainer" type="VBoxContainer" parent="PanelContainer/ScrollContainer"]
margin_right = 286.0
size_flags_horizontal = 3

[node name="Label" type="Label" parent="PanelContainer/ScrollContainer/VBoxContainer"]
visible = false
margin_right = 286.0
margin_bottom = 14.0
size_flags_horizontal = 3
size_flags_vertical = 0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "warning"
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="PanelContainer/ScrollContainer/VBoxContainer/Label"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 1, 1, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}
